#Frame title
jssframe.title=JSwingShell
#File menu entry text
jssframe.menu.file.text=&File
#Edit menu entry text
jssframe.menu.edit.text=&Edit
#View menu entry text
jssframe.menu.view.text=&View
#Toolbar menu entry text
jssframe.menu.view.toolbar.text=&Toolbar
#Zoom menu entry text
jssframe.menu.view.zoom.text=&Zoom
#Record menu entry text
jssframe.menu.record.text=&Record
#Help menu entry text
jssframe.menu.help.text=&Help


jssframe.action.load_command_file.help.short=Load and execute a shell file.
jssframe.action.load_command_file.help.long=Loads and executes the file at the given path:\n\
\t{0} file_path 
jssframe.action.load_command_file.run.file_mandatory=File path is mandatory!
jssframe.action.load_command_file.run.file_path_invalid=File path was not found or is not readable: {0}
jssframe.action.load_command_file.run.file_reading_error=Error occured while reading file: {0}
jssframe.action.load_command_file.run.buffered_file_closing_error=Error occured while closing buffered file reader: {0}
jssframe.action.load_command_file.run.file_closing_error=Error occured while closing file reader: {0}

jssframe.action.open_command_file.name=&Open
jssframe.action.open_command_file.run.file_filter_description=Shell file

jssframe.action.print_screen.help.short=Print the shell screen and save it to a file.
jssframe.action.print_screen.help.long=Print the shell screen and save it to a file:\n\
\t{0} file_path 
jssframe.action.print_screen.run.file_mandatory=File path is mandatory!
jssframe.action.print_screen.run.file_path_invalid=File path was not found or is not writable: {0}
jssframe.action.print_screen.run.file_writing_error=Error occured while writing image file: {0}
jssframe.action.print_screen.run.file_closing_error=Error occured while closing file output stream: {0}

jssframe.action.save_screen.name=&Print screen
jssframe.action.save_screen.run.file_filter_description=Image file

jssframe.action.exit.name=&Exit
jssframe.action.exit.help.short=Exit application.
jssframe.action.exit.help.long=Exits the application with default return code (0):\n\
\t{0}\n\
You can define exit status code as follow:\n\
\t{0} [integer] 
jssframe.action.exit.run.invalid_return_code=Invalid number format: {0}


jssframe.action.copy.name=Copy
jssframe.action.copy.help.short=Copy the current selection to the clipboard.
jssframe.action.copy.help.long=Copies the selection in the shell:\n\
\t{0}

jssframe.action.cut.name=Cut
jssframe.action.cut.help.short=Cut the current selection to the clipboard.
jssframe.action.cut.help.long=Cuts the selection from the shell to the clipboard:\n\
\t{0}

jssframe.action.paste.name=Paste
jssframe.action.paste.help.short=Paste the content of the clipboard to the current selection.
jssframe.action.paste.help.long=Pastes the content of the clipboard in the shell:\n\
\t{0}

jssframe.action.clear.name=Cl&ear
jssframe.action.clear.help.short=Clears all messages in the shell.

jssframe.action.select_all.name=Select All
jssframe.action.select_all.help.short=Select everything in the shell.
jssframe.action.select_all.help.long=Selects all in the shell:\n\
\t{0}


jssframe.action.toggle_toolbar.name=Toggle &toolbar
jssframe.action.toggle_toolbar.help.short=Toggle the frame's toolbar display.
jssframe.action.toggle_toolbar.help.long=You can switch display mode of toolbar as follow:\n\
\t{0} {1}\n\
\t{0} {2}

jssframe.action.toggle_toolbar_icons.name=Toggle toolbar &icons
jssframe.action.toggle_toolbar_icons.help.short=Toggle the frame's toolbar's icons display.
jssframe.action.toggle_toolbar_icons.help.long=You can switch display mode of toolbar icons as follow:\n\
\t{0} {1}\n\
\t{0} {2}

jssframe.action.toggle_toolbar_names.name=Toggle toolbar &names
jssframe.action.toggle_toolbar_names.help.short=Toggle the frame's toolbar's names display.
jssframe.action.toggle_toolbar_names.help.long=You can switch display mode of toolbar's names as follow:\n\
\t{0} {1}\n\
\t{0} {2}

jssframe.action.toggle_toolbar_large_icons.name=Toggle toolbar &large icons
jssframe.action.toggle_toolbar_large_icons.help.short=Toggle the frame's toolbar's large icons display.
jssframe.action.toggle_toolbar_large_icons.help.long=You can switch display mode of toolbar large icons as follow:\n\
\t{0} {1}\n\
\t{0} {2}

jssframe.action.toggle_toolbar_level_combo.name=Toggle toolbar l&evel combo box
jssframe.action.toggle_toolbar_level_combo.help.short=Toggle the frame's toolbar's level combo box display.
jssframe.action.toggle_toolbar_level_combo.help.long=You can switch display mode of toolbar's level combo box as follow:\n\
\t{0} {1}\n\
\t{0} {2}

jssframe.action.toggle_toolbar_locale_combo.name=Toggle toolbar l&ocale combo box
jssframe.action.toggle_toolbar_locale_combo.help.short=Toggle the frame's toolbar's locale combo box display.
jssframe.action.toggle_toolbar_locale_combo.help.long=You can switch display mode of toolbar's locale combo box as follow:\n\
\t{0} {1}\n\
\t{0} {2}

jssframe.action.zoom.name=&Zoom
jssframe.action.zoom.help.short=Change the size of the shell text.
jssframe.action.zoom.help.long=Shell text size can be increased by one point:\n\
\t{0} {1}\n\
\n\
Shell text size can be reset to its default values:\n\
\t{0} {2}\n\
\n\
Shell text size can be decreased by one point:\n\
\t{0} {3}\n\
\n\
Shell text size can also be derived by a given value:\n\
\t{0} number\n\
Example: \n\
{4} {5}\n\
Example: \n\
{4} {6}
jssframe.action.zoom.run.invalid_argument_error=Invalid zoom argument: {0}

jssframe.action.zoom_fit.name=Zoom &reset
jssframe.action.zoom_fit.help.short=Reset the size of the shell text.

jssframe.action.zoom_in.name=Zoom &in
jssframe.action.zoom_in.help.short=Increase the size of the shell text.

jssframe.action.zoom_out.name=Zoom &out
jssframe.action.zoom_out.help.short=Decrease the size of the shell text.

jssframe.action.fullscreen.name=&Full Screen
jssframe.action.fullscreen.help.short=Toggle the frame's full screen mode.
jssframe.action.fullscreen.help.long=You can switch full screen mode as follow:\n\
\t{0} {1}\n\
\t{0} {2}
jssframe.action.fullscreen.run.not_supported=Full screen not supported


jssframe.action.record.name=&Record
jssframe.action.record.help.short=Record the executed shell commands to a file.
jssframe.action.record.help.long=Start recording commands:\n\
\t{0} {1}\n\
If a start was already entered, only the last one before a stop or save command \
will be taken into account.\n\
\n\
Stop recording commands:\n\
\t{0} {2}\n\
If a stop was already entered, only the first one after a start command \
will be taken into account.\n\
\n\
Save recording commands:\n\
\t{0} {3} file_path\n\
If no stop was entered, the record will go from the last start command to the \
current save command.\n\
The recording will not stop until a stop command is entered, or until \
the application exits, meaning that a new save command will go from \
the last start command to the current save command, even if there were \
save done in between.
jssframe.action.record.run.file_writing_error=Error occured while writing file: {0}
jssframe.action.record.run.buffered_file_closing_error=Error occured while closing buffered file writer: {0}
jssframe.action.record.run.file_closing_error=Error occured while closing file writer: {0}

jssframe.action.record_save.name=&Save recording
jssframe.action.record_save.help.short=Save to a file a shell recording session.

jssframe.action.record_start.name=S&tart recording
jssframe.action.record_start.help.short=Mark the start of a shell recording session.

jssframe.action.record_stop.name=Sto&p recording
jssframe.action.record_stop.help.short=Mark the end of a shell recording session.


jssframe.action.help.name=&Help
jssframe.action.help.help.short=Display available commands.
jssframe.action.help.help.long=For more information on a command, enter {0} followed by the command:\n\
\t{1} [command] 
jssframe.action.help.run=For more information on a command, enter {0} followed by the command.\n\
\n\
Available commands:
jssframe.action.help.run.command_not_found=Command not found: {0}


jssframe.action.echo.help.short=Display a message in the shell.
jssframe.action.echo.help.long=Displays everything after the command on a new line:\n\
\t{0} [message] \n\
\n\
Example: {1} Hello world!\n\
Hello world!\n\
\n\
Example: {1}             Hello world!\n\
Hello world!\n\
\n\
Example: {1} "            Hello world!"\n\
\            Hello world!

jssframe.action.level.name=&Level
jssframe.action.level.help.short=Define the shell's log level.
jssframe.action.level.help.long=You can set the value as follow:
jssframe.action.level.run.new_level=Shell level set to {0}
jssframe.action.level.internal_command.help.short=Sets the shell''s log level to "{0}"

jssframe.action.locale.name=&Locale
jssframe.action.locale.help.short=Change the application locale.
jssframe.action.locale.help.long=You can set the locale as follow:
jssframe.action.locale.run.current_locale=Current locale is {0}
jssframe.action.locale.internal_command.help.short=Sets the application''s locale to "{0}"

jssframe.action.sleep.help.short=Put the current thread to sleep.
jssframe.action.sleep.help.long=Puts the current thread to sleep:\n\
\t{0}\n\
The default time for sleep is 1000 milliseconds (1 second).\n\
You can define the time for the sleep (in milliseconds) as follow:\n\
\t{0} [time] 
jssframe.action.sleep.run.invalid_number_format=Invalid number format: {0}
jssframe.action.sleep.run.negative_time=Sleep time cannot be negative: {0}

jssframe.action.wait.help.short=Wait for a given time in a separate thread.
jssframe.action.wait.help.long=Waits for a given time in a separate thread:\n\
\t{0}\n\
The default time for waiting is 1000 milliseconds (1 second).\n\
You can define the time for the sleep (in milliseconds) as follow:\n\
\t{0} [time] \n\
This action is suited for manual use since it will wait a given time without blocking the current thread.\n\
This action should not be called outside of the EDT.
jssframe.action.wait.run.invalid_number_format=Invalid number format: {0}
jssframe.action.wait.run.negative_time=Wait time cannot be negative: {0}
jssframe.action.wait.run.interrupted=Wait action interrupted: {0}

jssframe.action.time.help.short=Display the current time and date in the shell.
jssframe.action.time.help.long=Displays the current time and date:\n\
\t{0}\n\
The date/time format can be specified as well as the language:\n\
\t{0} [format] [language] [country] [variant] \n\
\n\
If no format and language are provided, the default date format and locale will be used.
jssframe.action.time.help.long.example=Example:\ 
jssframe.action.time.run.invalid_date_format=Error occurred while parsing date/time format {1}: {0}
jssframe.action.time.run.invalid_language_format=Error occurred while parsing date/time format {1} for language {2}: {0}
jssframe.action.time.run.invalid_country_format=Error occurred while parsing date/time format {1} for language {2} and country {3}: {0}
jssframe.action.time.run.invalid_variant_format=Error occurred while parsing date/time format {1} for language {2} and country {3} and variant {4}: {0}
